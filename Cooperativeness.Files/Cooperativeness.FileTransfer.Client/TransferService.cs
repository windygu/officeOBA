//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3655
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.1432。
// 
namespace Cooperativeness.FileTransfer {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TransferWebServicesSoap", Namespace="http://XPlugin.XX/FileTransfer/")]
    public partial class TransferWebServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetWebServerPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWebServicesFileDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWebServicesDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestConnectednessOperationCompleted;
        
        private System.Threading.SendOrPostCallback PackageFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PackageFilesForDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnpackageFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SplitFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDirectoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesOperationCompleted;
        
        /// <remarks/>
        public TransferWebServices() {
            this.Url = "http://localhost/FileTransfer/TransferWebServices.asmx";
        }
        
        /// <remarks/>
        public event GetWebServerPathCompletedEventHandler GetWebServerPathCompleted;
        
        /// <remarks/>
        public event SetWebServicesFileDirectoryCompletedEventHandler SetWebServicesFileDirectoryCompleted;
        
        /// <remarks/>
        public event SetWebServicesDirectoryCompletedEventHandler SetWebServicesDirectoryCompleted;
        
        /// <remarks/>
        public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event DeleteDirectoryCompletedEventHandler DeleteDirectoryCompleted;
        
        /// <remarks/>
        public event TestConnectednessCompletedEventHandler TestConnectednessCompleted;
        
        /// <remarks/>
        public event PackageFilesCompletedEventHandler PackageFilesCompleted;
        
        /// <remarks/>
        public event PackageFilesForDirectoryCompletedEventHandler PackageFilesForDirectoryCompleted;
        
        /// <remarks/>
        public event UnpackageFilesCompletedEventHandler UnpackageFilesCompleted;
        
        /// <remarks/>
        public event SplitFilesCompletedEventHandler SplitFilesCompleted;
        
        /// <remarks/>
        public event MergeFilesCompletedEventHandler MergeFilesCompleted;
        
        /// <remarks/>
        public event GetDirectoriesCompletedEventHandler GetDirectoriesCompleted;
        
        /// <remarks/>
        public event GetFilesCompletedEventHandler GetFilesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/GetWebServerPath", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWebServerPath(string directoryPath) {
            object[] results = this.Invoke("GetWebServerPath", new object[] {
                        directoryPath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebServerPath(string directoryPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebServerPath", new object[] {
                        directoryPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetWebServerPath(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebServerPathAsync(string directoryPath) {
            this.GetWebServerPathAsync(directoryPath, null);
        }
        
        /// <remarks/>
        public void GetWebServerPathAsync(string directoryPath, object userState) {
            if ((this.GetWebServerPathOperationCompleted == null)) {
                this.GetWebServerPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebServerPathOperationCompleted);
            }
            this.InvokeAsync("GetWebServerPath", new object[] {
                        directoryPath}, this.GetWebServerPathOperationCompleted, userState);
        }
        
        private void OnGetWebServerPathOperationCompleted(object arg) {
            if ((this.GetWebServerPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebServerPathCompleted(this, new GetWebServerPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/SetWebServicesFileDirectory", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWebServicesFileDirectory(string directoryName) {
            this.Invoke("SetWebServicesFileDirectory", new object[] {
                        directoryName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetWebServicesFileDirectory(string directoryName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetWebServicesFileDirectory", new object[] {
                        directoryName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetWebServicesFileDirectory(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetWebServicesFileDirectoryAsync(string directoryName) {
            this.SetWebServicesFileDirectoryAsync(directoryName, null);
        }
        
        /// <remarks/>
        public void SetWebServicesFileDirectoryAsync(string directoryName, object userState) {
            if ((this.SetWebServicesFileDirectoryOperationCompleted == null)) {
                this.SetWebServicesFileDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWebServicesFileDirectoryOperationCompleted);
            }
            this.InvokeAsync("SetWebServicesFileDirectory", new object[] {
                        directoryName}, this.SetWebServicesFileDirectoryOperationCompleted, userState);
        }
        
        private void OnSetWebServicesFileDirectoryOperationCompleted(object arg) {
            if ((this.SetWebServicesFileDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWebServicesFileDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/SetWebServicesDirectory", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWebServicesDirectory(string directoryName) {
            this.Invoke("SetWebServicesDirectory", new object[] {
                        directoryName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetWebServicesDirectory(string directoryName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetWebServicesDirectory", new object[] {
                        directoryName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetWebServicesDirectory(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetWebServicesDirectoryAsync(string directoryName) {
            this.SetWebServicesDirectoryAsync(directoryName, null);
        }
        
        /// <remarks/>
        public void SetWebServicesDirectoryAsync(string directoryName, object userState) {
            if ((this.SetWebServicesDirectoryOperationCompleted == null)) {
                this.SetWebServicesDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWebServicesDirectoryOperationCompleted);
            }
            this.InvokeAsync("SetWebServicesDirectory", new object[] {
                        directoryName}, this.SetWebServicesDirectoryOperationCompleted, userState);
        }
        
        private void OnSetWebServicesDirectoryOperationCompleted(object arg) {
            if ((this.SetWebServicesDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWebServicesDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/GetFileSize", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetFileSize(string fileName, string directoryPath) {
            object[] results = this.Invoke("GetFileSize", new object[] {
                        fileName,
                        directoryPath});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFileSize(string fileName, string directoryPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFileSize", new object[] {
                        fileName,
                        directoryPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndGetFileSize(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string fileName, string directoryPath) {
            this.GetFileSizeAsync(fileName, directoryPath, null);
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string fileName, string directoryPath, object userState) {
            if ((this.GetFileSizeOperationCompleted == null)) {
                this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetFileSize", new object[] {
                        fileName,
                        directoryPath}, this.GetFileSizeOperationCompleted, userState);
        }
        
        private void OnGetFileSizeOperationCompleted(object arg) {
            if ((this.GetFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/DeleteFile", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteFile(string remoteFile, string directoryPath) {
            object[] results = this.Invoke("DeleteFile", new object[] {
                        remoteFile,
                        directoryPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteFile(string remoteFile, string directoryPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteFile", new object[] {
                        remoteFile,
                        directoryPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDeleteFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string remoteFile, string directoryPath) {
            this.DeleteFileAsync(remoteFile, directoryPath, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string remoteFile, string directoryPath, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        remoteFile,
                        directoryPath}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/DeleteDirectory", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteDirectory(string directoryPath) {
            object[] results = this.Invoke("DeleteDirectory", new object[] {
                        directoryPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDirectory(string directoryPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDirectory", new object[] {
                        directoryPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDeleteDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDirectoryAsync(string directoryPath) {
            this.DeleteDirectoryAsync(directoryPath, null);
        }
        
        /// <remarks/>
        public void DeleteDirectoryAsync(string directoryPath, object userState) {
            if ((this.DeleteDirectoryOperationCompleted == null)) {
                this.DeleteDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDirectoryOperationCompleted);
            }
            this.InvokeAsync("DeleteDirectory", new object[] {
                        directoryPath}, this.DeleteDirectoryOperationCompleted, userState);
        }
        
        private void OnDeleteDirectoryOperationCompleted(object arg) {
            if ((this.DeleteDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDirectoryCompleted(this, new DeleteDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/TestConnectedness", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TestConnectedness() {
            object[] results = this.Invoke("TestConnectedness", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTestConnectedness(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestConnectedness", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndTestConnectedness(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectednessAsync() {
            this.TestConnectednessAsync(null);
        }
        
        /// <remarks/>
        public void TestConnectednessAsync(object userState) {
            if ((this.TestConnectednessOperationCompleted == null)) {
                this.TestConnectednessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectednessOperationCompleted);
            }
            this.InvokeAsync("TestConnectedness", new object[0], this.TestConnectednessOperationCompleted, userState);
        }
        
        private void OnTestConnectednessOperationCompleted(object arg) {
            if ((this.TestConnectednessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectednessCompleted(this, new TestConnectednessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/PackageFiles", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PackageFiles(string[] localFileList, string passWord) {
            object[] results = this.Invoke("PackageFiles", new object[] {
                        localFileList,
                        passWord});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPackageFiles(string[] localFileList, string passWord, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PackageFiles", new object[] {
                        localFileList,
                        passWord}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPackageFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PackageFilesAsync(string[] localFileList, string passWord) {
            this.PackageFilesAsync(localFileList, passWord, null);
        }
        
        /// <remarks/>
        public void PackageFilesAsync(string[] localFileList, string passWord, object userState) {
            if ((this.PackageFilesOperationCompleted == null)) {
                this.PackageFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPackageFilesOperationCompleted);
            }
            this.InvokeAsync("PackageFiles", new object[] {
                        localFileList,
                        passWord}, this.PackageFilesOperationCompleted, userState);
        }
        
        private void OnPackageFilesOperationCompleted(object arg) {
            if ((this.PackageFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PackageFilesCompleted(this, new PackageFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/PackageFilesForDirectory", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PackageFilesForDirectory(string locaDirectoryPath, string passWord) {
            object[] results = this.Invoke("PackageFilesForDirectory", new object[] {
                        locaDirectoryPath,
                        passWord});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPackageFilesForDirectory(string locaDirectoryPath, string passWord, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PackageFilesForDirectory", new object[] {
                        locaDirectoryPath,
                        passWord}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPackageFilesForDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PackageFilesForDirectoryAsync(string locaDirectoryPath, string passWord) {
            this.PackageFilesForDirectoryAsync(locaDirectoryPath, passWord, null);
        }
        
        /// <remarks/>
        public void PackageFilesForDirectoryAsync(string locaDirectoryPath, string passWord, object userState) {
            if ((this.PackageFilesForDirectoryOperationCompleted == null)) {
                this.PackageFilesForDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPackageFilesForDirectoryOperationCompleted);
            }
            this.InvokeAsync("PackageFilesForDirectory", new object[] {
                        locaDirectoryPath,
                        passWord}, this.PackageFilesForDirectoryOperationCompleted, userState);
        }
        
        private void OnPackageFilesForDirectoryOperationCompleted(object arg) {
            if ((this.PackageFilesForDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PackageFilesForDirectoryCompleted(this, new PackageFilesForDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/UnpackageFiles", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnpackageFiles(string fileName, string localDirectoryPath, string passWord, string unPackagePath) {
            object[] results = this.Invoke("UnpackageFiles", new object[] {
                        fileName,
                        localDirectoryPath,
                        passWord,
                        unPackagePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnpackageFiles(string fileName, string localDirectoryPath, string passWord, string unPackagePath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnpackageFiles", new object[] {
                        fileName,
                        localDirectoryPath,
                        passWord,
                        unPackagePath}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnpackageFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnpackageFilesAsync(string fileName, string localDirectoryPath, string passWord, string unPackagePath) {
            this.UnpackageFilesAsync(fileName, localDirectoryPath, passWord, unPackagePath, null);
        }
        
        /// <remarks/>
        public void UnpackageFilesAsync(string fileName, string localDirectoryPath, string passWord, string unPackagePath, object userState) {
            if ((this.UnpackageFilesOperationCompleted == null)) {
                this.UnpackageFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnpackageFilesOperationCompleted);
            }
            this.InvokeAsync("UnpackageFiles", new object[] {
                        fileName,
                        localDirectoryPath,
                        passWord,
                        unPackagePath}, this.UnpackageFilesOperationCompleted, userState);
        }
        
        private void OnUnpackageFilesOperationCompleted(object arg) {
            if ((this.UnpackageFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnpackageFilesCompleted(this, new UnpackageFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/SplitFiles", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SplitFiles(string remotefile, string directoryPath, int chunkSize) {
            object[] results = this.Invoke("SplitFiles", new object[] {
                        remotefile,
                        directoryPath,
                        chunkSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSplitFiles(string remotefile, string directoryPath, int chunkSize, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SplitFiles", new object[] {
                        remotefile,
                        directoryPath,
                        chunkSize}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSplitFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SplitFilesAsync(string remotefile, string directoryPath, int chunkSize) {
            this.SplitFilesAsync(remotefile, directoryPath, chunkSize, null);
        }
        
        /// <remarks/>
        public void SplitFilesAsync(string remotefile, string directoryPath, int chunkSize, object userState) {
            if ((this.SplitFilesOperationCompleted == null)) {
                this.SplitFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSplitFilesOperationCompleted);
            }
            this.InvokeAsync("SplitFiles", new object[] {
                        remotefile,
                        directoryPath,
                        chunkSize}, this.SplitFilesOperationCompleted, userState);
        }
        
        private void OnSplitFilesOperationCompleted(object arg) {
            if ((this.SplitFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SplitFilesCompleted(this, new SplitFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/MergeFiles", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MergeFiles(string directoryPath, string searchPattern, bool deleteOrginFile, string mergeFilePath) {
            object[] results = this.Invoke("MergeFiles", new object[] {
                        directoryPath,
                        searchPattern,
                        deleteOrginFile,
                        mergeFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMergeFiles(string directoryPath, string searchPattern, bool deleteOrginFile, string mergeFilePath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MergeFiles", new object[] {
                        directoryPath,
                        searchPattern,
                        deleteOrginFile,
                        mergeFilePath}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndMergeFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MergeFilesAsync(string directoryPath, string searchPattern, bool deleteOrginFile, string mergeFilePath) {
            this.MergeFilesAsync(directoryPath, searchPattern, deleteOrginFile, mergeFilePath, null);
        }
        
        /// <remarks/>
        public void MergeFilesAsync(string directoryPath, string searchPattern, bool deleteOrginFile, string mergeFilePath, object userState) {
            if ((this.MergeFilesOperationCompleted == null)) {
                this.MergeFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeFilesOperationCompleted);
            }
            this.InvokeAsync("MergeFiles", new object[] {
                        directoryPath,
                        searchPattern,
                        deleteOrginFile,
                        mergeFilePath}, this.MergeFilesOperationCompleted, userState);
        }
        
        private void OnMergeFilesOperationCompleted(object arg) {
            if ((this.MergeFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeFilesCompleted(this, new MergeFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/GetDirectories", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDirectories(string dirPath, string searchPattern) {
            object[] results = this.Invoke("GetDirectories", new object[] {
                        dirPath,
                        searchPattern});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDirectories(string dirPath, string searchPattern, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDirectories", new object[] {
                        dirPath,
                        searchPattern}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetDirectories(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDirectoriesAsync(string dirPath, string searchPattern) {
            this.GetDirectoriesAsync(dirPath, searchPattern, null);
        }
        
        /// <remarks/>
        public void GetDirectoriesAsync(string dirPath, string searchPattern, object userState) {
            if ((this.GetDirectoriesOperationCompleted == null)) {
                this.GetDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetDirectories", new object[] {
                        dirPath,
                        searchPattern}, this.GetDirectoriesOperationCompleted, userState);
        }
        
        private void OnGetDirectoriesOperationCompleted(object arg) {
            if ((this.GetDirectoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirectoriesCompleted(this, new GetDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://XPlugin.XX/FileTransfer/GetFiles", RequestNamespace="http://XPlugin.XX/FileTransfer/", ResponseNamespace="http://XPlugin.XX/FileTransfer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFiles(string dirPath, string searchPattern, bool isFullPath) {
            object[] results = this.Invoke("GetFiles", new object[] {
                        dirPath,
                        searchPattern,
                        isFullPath});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFiles(string dirPath, string searchPattern, bool isFullPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFiles", new object[] {
                        dirPath,
                        searchPattern,
                        isFullPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesAsync(string dirPath, string searchPattern, bool isFullPath) {
            this.GetFilesAsync(dirPath, searchPattern, isFullPath, null);
        }
        
        /// <remarks/>
        public void GetFilesAsync(string dirPath, string searchPattern, bool isFullPath, object userState) {
            if ((this.GetFilesOperationCompleted == null)) {
                this.GetFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesOperationCompleted);
            }
            this.InvokeAsync("GetFiles", new object[] {
                        dirPath,
                        searchPattern,
                        isFullPath}, this.GetFilesOperationCompleted, userState);
        }
        
        private void OnGetFilesOperationCompleted(object arg) {
            if ((this.GetFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesCompleted(this, new GetFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetWebServerPathCompletedEventHandler(object sender, GetWebServerPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebServerPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebServerPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void SetWebServicesFileDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void SetWebServicesDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void DeleteFileCompletedEventHandler(object sender, DeleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void DeleteDirectoryCompletedEventHandler(object sender, DeleteDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void TestConnectednessCompletedEventHandler(object sender, TestConnectednessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectednessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectednessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void PackageFilesCompletedEventHandler(object sender, PackageFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PackageFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PackageFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void PackageFilesForDirectoryCompletedEventHandler(object sender, PackageFilesForDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PackageFilesForDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PackageFilesForDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void UnpackageFilesCompletedEventHandler(object sender, UnpackageFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnpackageFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnpackageFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void SplitFilesCompletedEventHandler(object sender, SplitFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SplitFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SplitFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void MergeFilesCompletedEventHandler(object sender, MergeFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetDirectoriesCompletedEventHandler(object sender, GetDirectoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetFilesCompletedEventHandler(object sender, GetFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}
