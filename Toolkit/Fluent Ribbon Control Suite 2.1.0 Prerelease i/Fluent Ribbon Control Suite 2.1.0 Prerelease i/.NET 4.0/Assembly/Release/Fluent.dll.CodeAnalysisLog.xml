<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft fxcop 10.0\Xml\FxCopReport.xsl"?>
<FxCopReport Version="10.0">
 <Namespaces>
  <Namespace Name="Fluent.Converters">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Fluent.Converters' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Fluent.Extensibility">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Fluent.Extensibility' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Fluent.Metro.Behaviours">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Fluent.Metro.Behaviours' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Fluent.Metro.Controls">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Fluent.Metro.Controls' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Fluent.Metro.Converters">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Fluent.Metro.Converters' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="XamlGeneratedNamespace">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'XamlGeneratedNamespace' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\bin\NET 4.0\Release\Fluent.dll">
   <Modules>
    <Module Name="fluent.dll">
     <Namespaces>
      <Namespace Name="Fluent">
       <Types>
        <Type Name="Backstage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FindRibbon()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Backstage.cs" Line="362">'item', a variable, is cast to type 'Ribbon' multiple times in method 'Backstage.FindRibbon()'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BackstageTabControl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ItemsPanelBackgroundProperty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'BackstageTabControl.ItemsPanelBackgroundProperty' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ClosingWindowEventHandlerArgs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Cancelled" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Cancelled" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Replace the term 'Cancelled' in member name 'ClosingWindowEventHandlerArgs.Cancelled' with the preferred alternate 'Canceled'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ColorGallery" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ColorGallery.cs" Line="109">Initialize all static fields in 'ColorGallery' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HighlightColors" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ArrayFieldsShouldNotBeReadOnly" Category="Microsoft.Security" CheckId="CA2105" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="CriticalWarning">Either replace 'ColorGallery.HighlightColors' with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RaiseSelectedColorChanged()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ColorGallery.cs" Line="663">Consider making 'ColorGallery.RaiseSelectedColorChanged()' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StandardColors" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ArrayFieldsShouldNotBeReadOnly" Category="Microsoft.Security" CheckId="CA2105" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="CriticalWarning">Either replace 'ColorGallery.StandardColors' with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StandardGradients" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ColorGallery.cs" Line="620">Change 'ColorGallery.StandardGradients' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StandardThemeColors" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ArrayFieldsShouldNotBeReadOnly" Category="Microsoft.Security" CheckId="CA2105" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="CriticalWarning">Either replace 'ColorGallery.StandardThemeColors' with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThemeGradients" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ColorGallery.cs" Line="598">Change 'ColorGallery.ThemeGradients' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ComboBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#canSizeX" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ComboBox.canSizeX' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#editableTextBox" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ComboBox.editableTextBox' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ContextMenuService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Coerce(System.Windows.DependencyObject)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ContextMenuService.cs" Line="42">In method 'ContextMenuService.Coerce(DependencyObject)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DismissPopupEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'DismissPopupEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DpiHelper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Fluent.NativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="50">'DpiHelper.DpiHelper()' calls 'NativeMethods.ReleaseDC(IntPtr, IntPtr)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeviceSizeToLogical(System.Windows.Size)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="100">'DpiHelper.DeviceSizeToLogical(Size)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Gallery" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsLastItemPropertyKey" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'Gallery.IsLastItemPropertyKey' or change the field to one that is an immutable reference type. If the reference type 'DependencyPropertyKey' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GalleryGroupContainer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="GalleryGroupContainer.cs" Line="40">Initialize all static fields in 'GalleryGroupContainer' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemSize()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="GalleryGroupContainer.cs" Line="227">Change 'GalleryGroupContainer.GetItemSize()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GalleryPanel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetItemSize()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="GalleryPanel.cs" Line="396">Change 'GalleryPanel.GetItemSize()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IconConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetThumbnail(System.Windows.Media.Imaging.BitmapSource)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="IconConverter.cs" Line="93">Modify 'IconConverter.GetThumbnail(BitmapSource)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InRibbonGallery" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#layoutRoot" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'InRibbonGallery.layoutRoot' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="KeyTipAdorner" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ArrangeOverride(System.Windows.Size)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Rect" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="KeyTipAdorner.cs" Line="665">'KeyTipAdorner.ArrangeOverride(Size)' creates a new instance of 'Rect' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="KeyTipAdorner.cs" Line="988">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'KeyTipAdorner.Log(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="KeyTranslator" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#KeyToChar(System.Windows.Input.Key,System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="KeyTranslator.cs" Line="42">'KeyTranslator.KeyToChar(Key, CultureInfo)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="Fluent.NativeMethods.GetKeyboardLayoutList(System.Int32,System.IntPtr[])" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="KeyTranslator.cs" Line="46">'KeyTranslator.KeyToChar(Key, CultureInfo)' calls 'NativeMethods.GetKeyboardLayoutList(int, IntPtr[])' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MenuItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnMenuItemMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="MenuItem.cs" Line="357">'sender', a parameter, is cast to type 'MenuItem' multiple times in method 'MenuItem.OnMenuItemMouseWheel(object, MouseWheelEventArgs)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MenuPanel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InvalidateUpdateMenuSizes()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="MenuPanel.cs" Line="156">'MenuPanel.InvalidateUpdateMenuSizes()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnItemSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="MenuPanel.cs" Line="143">'MenuPanel.OnItemSizeChanged(object, SizeChangedEventArgs)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnItemVisibilityChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="MenuPanel.cs" Line="148">'MenuPanel.OnItemVisibilityChanged(object, DependencyPropertyChangedEventArgs)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetroWindow" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="MetroWindow.cs" Line="20">Initialize all static fields in 'MetroWindow' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WindowTitle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_WindowTitle()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="MetroWindow.cs" Line="90">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'MetroWindow.WindowTitle.get()' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NativeMethods" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#DwmGetWindowAttribute(System.IntPtr,Fluent.NativeMethods+DWMWINDOWATTRIBUTE,Fluent.NativeMethods+Rect&amp;,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.DwmGetWindowAttribute(IntPtr, NativeMethods.DWMWINDOWATTRIBUTE, ref NativeMethods.Rect, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DwmGetWindowAttribute(System.IntPtr,Fluent.NativeMethods+DWMWINDOWATTRIBUTE,System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.DwmGetWindowAttribute(IntPtr, NativeMethods.DWMWINDOWATTRIBUTE, IntPtr, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyboardLayoutList(System.Int32,System.IntPtr[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.GetKeyboardLayoutList(int, IntPtr[])' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyboardState(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.GetKeyboardState(byte[])' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadKeyboardLayout(System.String,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.LoadKeyboardLayout(string, uint)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MapVirtualKeyEx(System.UInt32,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.MapVirtualKeyEx(uint, uint, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReleaseCapture()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'NativeMethods.ReleaseCapture()'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetActiveWindow(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.SetActiveWindow(IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToUnicodeEx(System.UInt32,System.UInt32,System.Byte[],System.Text.StringBuilder,System.Int32,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.ToUnicodeEx(uint, uint, byte[], StringBuilder, int, uint, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnloadKeyboardLayout(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'NativeMethods.UnloadKeyboardLayout(IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ObjectToImageConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonControl.cs" Line="45">'value', a parameter, is cast to type 'string' multiple times in method 'ObjectToImageConverter.Convert(object, Type, object, CultureInfo)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PopupService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnLostMouseCapture(System.Object,System.Windows.Input.MouseEventArgs)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="PopupService.cs" Line="147">Consider changing the type of parameter 'e' in 'PopupService.OnLostMouseCapture(object, MouseEventArgs)' from 'MouseEventArgs' to its base type 'RoutedEventArgs'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RaiseDismissPopupEventAsync(System.Object,Fluent.DismissPopupMode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="PopupService.cs" Line="99">Consider making 'PopupService.RaiseDismissPopupEventAsync(object, DismissPopupMode)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QuickAccessItemsProvider" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#FindSupportedControl(System.Windows.Media.Visual,System.Windows.Point)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="QuickAccessMenuItem.cs" Line="237">'QuickAccessItemsProvider.FindSupportedControl(Visual, Point)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Ribbon" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddToQuickAccessCommand" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Ribbon.AddToQuickAccessCommand' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CustomizeQuickAccessToolbarCommand" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Toolbar" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Toolbar' in member name 'Ribbon.CustomizeQuickAccessToolbarCommand' should be expressed as a compound word, 'ToolBar'.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Ribbon.CustomizeQuickAccessToolbarCommand' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CustomizeTheRibbonCommand" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Ribbon.CustomizeTheRibbonCommand' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIsolatedStorageFile()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="1953">Modify 'Ribbon.GetIsolatedStorageFile()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsolatedStorageFileName" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_IsolatedStorageFileName()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="1843">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'Ribbon.IsolatedStorageFileName.get()' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LoadState()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="1937">Modify 'Ribbon.LoadState()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="1939">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Ribbon.LoadState()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveFromQuickAccessCommand" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Ribbon.RemoveFromQuickAccessCommand' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveState()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="1910">Modify 'Ribbon.SaveState()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="1912">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Ribbon.SaveState()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveState(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.IFormatProvider,System.String,System.Object[])" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="StringCreation" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="2017">'Ribbon.SaveState(Stream)' calls 'string.Format(IFormatProvider, string, params object[])' but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveWindowSize(System.Windows.Window)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="Ribbon.cs" Line="1791">The 'this' parameter (or 'Me' in Visual Basic) of 'Ribbon.SaveWindowSize(Window)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowQuickAccessAboveCommand" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Ribbon.ShowQuickAccessAboveCommand' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowQuickAccessBelowCommand" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Ribbon.ShowQuickAccessBelowCommand' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToggleMinimizeTheRibbonCommand" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Ribbon.ToggleMinimizeTheRibbonCommand' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CustomizeQuickAccessToolbar" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Toolbar" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Toolbar' in member name 'Ribbon.CustomizeQuickAccessToolbar' should be expressed as a compound word, 'ToolBar'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RibbonAttachedProperties" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'RibbonAttachedProperties' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetTitleBarHeight(System.Windows.UIElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\AttachedProperties" File="RibbonAttachedProperties.cs" Line="25">Consider changing the type of parameter 'element' in 'RibbonAttachedProperties.GetTitleBarHeight(UIElement)' from 'UIElement' to its base type 'DependencyObject'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetTitleBarHeight(System.Windows.UIElement,System.Double)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\AttachedProperties" File="RibbonAttachedProperties.cs" Line="20">Consider changing the type of parameter 'element' in 'RibbonAttachedProperties.SetTitleBarHeight(UIElement, double)' from 'UIElement' to its base type 'DependencyObject'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RibbonContextualTabGroup" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Items" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonContextualTabGroup.cs" Line="67">Change 'List&lt;RibbonTabItem&gt;' in 'RibbonContextualTabGroup.Items' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RibbonControl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnCanAddToQuickAccessToolbarChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Toolbar" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonControl.cs" Line="438">The discrete term 'Toolbar' in member name 'RibbonControl.OnCanAddToQuickAccessToolbarChanged(DependencyObject, DependencyPropertyChangedEventArgs)' should be expressed as a compound word, 'ToolBar'.</Issue>
            </Message>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonControl.cs" Line="438">In method 'RibbonControl.OnCanAddToQuickAccessToolbarChanged(DependencyObject, DependencyPropertyChangedEventArgs)', consider providing a more meaningful name than parameter name 'd'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RibbonGroupBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#downGrid" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'RibbonGroupBox.downGrid' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RibbonGroupsContainer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#MeasureOverride(System.Windows.Size)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Size" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonGroupsContainer.cs" Line="107">'RibbonGroupsContainer.MeasureOverride(Size)' creates a new instance of 'Size' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RibbonTabControl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RaiseRequestBackstageClose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonTabControl.cs" Line="756">Consider making 'RibbonTabControl.RaiseRequestBackstageClose()' an event.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RibbonWindow" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="119">Initialize all static fields in 'RibbonWindow' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearRoundingRegion()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Fluent.NativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="949">'RibbonWindow.ClearRoundingRegion()' calls 'NativeMethods.SetWindowRgn(IntPtr, IntPtr, bool)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRoundingRegion(System.Nullable`1&lt;Fluent.NativeMethods+WINDOWPOS&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Fluent.NativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="993">'RibbonWindow.SetRoundingRegion(NativeMethods.WINDOWPOS?)' calls 'NativeMethods.SetWindowRgn(IntPtr, IntPtr, bool)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="1067">'RibbonWindow.SetRoundingRegion(NativeMethods.WINDOWPOS?)' calls 'NativeMethods.SetWindowRgn(IntPtr, IntPtr, bool)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateFrameState(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="force" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="926">Parameter 'force' of 'RibbonWindow.UpdateFrameState(bool)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateSystemMenu(System.Nullable`1&lt;System.Windows.WindowState&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Fluent.NativeMethods.EnableMenuItem(System.IntPtr,System.Int32,System.UInt32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="894">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="895">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="896">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="897">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="898">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="901">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="902">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="903">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="904">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="905">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="908">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="909">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="910">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="911">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="RibbonWindow.cs" Line="912">'RibbonWindow.UpdateSystemMenu(WindowState?)' calls 'NativeMethods.EnableMenuItem(IntPtr, int, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StatusBar" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="StatusBar.cs" Line="42">Initialize all static fields in 'StatusBar' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StatusBarItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="StatusBarItem.cs" Line="31">Initialize all static fields in 'StatusBarItem' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="StatusBarItem.cs" Line="43">The property name 'StatusBarItem.Value' is confusing given the existence of inherited method 'DependencyObject.GetValue(DependencyProperty)'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StatusBarMenuItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="StatusBarMenuItem.cs" Line="29">Initialize all static fields in 'StatusBarMenuItem' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TextBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TextDecorations" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="TextBox.cs" Line="207">Change 'TextBox.TextDecorations' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ToggleButtonHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'ToggleButtonHelper' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CoerceIsChecked(System.Windows.DependencyObject,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ToggleButtonHelper.cs" Line="41">In method 'ToggleButtonHelper.CoerceIsChecked(DependencyObject, object)', consider providing a more meaningful name than parameter name 'd'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnGroupNameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ToggleButtonHelper.cs" Line="21">In method 'ToggleButtonHelper.OnGroupNameChanged(DependencyObject, DependencyPropertyChangedEventArgs)', consider providing a more meaningful name than parameter name 'd'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnIsCheckedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="ToggleButtonHelper.cs" Line="82">In method 'ToggleButtonHelper.OnIsCheckedChanged(DependencyObject, DependencyPropertyChangedEventArgs)', consider providing a more meaningful name than parameter name 'd'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TwoLineLabel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#UpdateTextRun()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.LastIndexOf(System.String,System.Int32,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="TwoLineLabel.cs" Line="186">Because the behavior of 'string.LastIndexOf(string, int, int)' could vary based on the current user's locale settings, replace this call in 'TwoLineLabel.UpdateTextRun()' with a call to 'string.LastIndexOf(string, int, int, StringComparison)'. If the result of 'string.LastIndexOf(string, int, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WindowCommands" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnNativeResourcesShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1049" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
           <Issue Certainty="50" Level="CriticalError">Implement IDisposable on 'WindowCommands'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetCaption(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Fluent.Metro.Native.UnsafeNativeMethods.LoadString(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="WindowCommands.cs" Line="102">'WindowCommands.GetCaption(int)' calls 'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetParentWindow()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent" File="WindowCommands.cs" Line="224">'parent', a variable, is cast to type 'Window' multiple times in method 'WindowCommands.GetParentWindow()'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Fluent.Converters">
       <Types>
        <Type Name="StaticConverters" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InvertNumericConverter" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'StaticConverters.InvertNumericConverter' or change the field to one that is an immutable reference type. If the reference type 'InvertNumericConverter' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThicknessConverter" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'StaticConverters.ThicknessConverter' or change the field to one that is an immutable reference type. If the reference type 'ThicknessConverter' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ThicknessConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Converters" File="ThicknessConverter.cs" Line="21">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ThicknessConverter.Convert(object[], Type, object, CultureInfo)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Converters" File="ThicknessConverter.cs" Line="21">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ThicknessConverter.Convert(object[], Type, object, CultureInfo)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Converters" File="ThicknessConverter.cs" Line="21">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ThicknessConverter.Convert(object[], Type, object, CultureInfo)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Converters" File="ThicknessConverter.cs" Line="21">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ThicknessConverter.Convert(object[], Type, object, CultureInfo)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Fluent.Internal">
       <Types>
        <Type Name="DoubleUtil" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Zero" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'DoubleUtil.Zero' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Fluent.Metro.Behaviours">
       <Types>
        <Type Name="BorderlessWindowBehavior" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AutoSizeToContentProperty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'BorderlessWindowBehavior.AutoSizeToContentProperty' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HwndHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Fluent.Metro.Native.UnsafeNativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,Fluent.Metro.Native.MARGINS@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="255">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.DwmExtendFrameIntoClientArea(IntPtr, ref MARGINS)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
            <Message Id="Fluent.Metro.Native.UnsafeNativeMethods.DwmSetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="253">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.DwmSetWindowAttribute(IntPtr, int, ref int, int)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
            <Message Id="Fluent.Metro.Native.UnsafeNativeMethods.EnableMenuItem(System.IntPtr,System.UInt32,System.UInt32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="355">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="359">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="360">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="361">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="365">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="366">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="367">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="371">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="374">'BorderlessWindowBehavior.HwndHook(IntPtr, int, IntPtr, IntPtr, ref bool)' calls 'UnsafeNativeMethods.EnableMenuItem(IntPtr, uint, uint)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResizeWithGripProperty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'BorderlessWindowBehavior.ResizeWithGripProperty' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShouldHaveBorder()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Behaviours" File="BorderlessWindowBehaviour.cs" Line="194">The 'this' parameter (or 'Me' in Visual Basic) of 'BorderlessWindowBehavior.ShouldHaveBorder()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StylizedBehaviors" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'StylizedBehaviors' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Fluent.Metro.Controls">
       <Types>
        <Type Name="WindowSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LoadWindowState()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Controls" File="WindowSettings.cs" Line="79">Modify 'WindowSettings.LoadWindowState()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Fluent.Metro.Converters">
       <Types>
        <Type Name="MarkupConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Converters" File="MarkupConverter.cs" Line="26">Modify 'MarkupConverter.IValueConverter.Convert(object, Type, object, CultureInfo)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Converters" File="MarkupConverter.cs" Line="38">Modify 'MarkupConverter.IValueConverter.ConvertBack(object, Type, object, CultureInfo)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ToLowerConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Converters" File="ToUpperConverter.cs" Line="29">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ToLowerConverter.Convert(object, Type, object, CultureInfo)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ToUpperConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Converters" File="ToUpperConverter.cs" Line="15">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ToUpperConverter.Convert(object, Type, object, CultureInfo)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Fluent.Metro.Native">
       <Types>
        <Type Name="Constants" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GCLP_HBRBACKGROUND" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GCLP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'GCLP' in member name 'Constants.GCLP_HBRBACKGROUND' by changing it to 'Gclp'.</Issue>
            </Message>
            <Message Id="HBRBACKGROUND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HBRBACKGROUND' in member name 'Constants.GCLP_HBRBACKGROUND' by changing it to 'Hbrbackground'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.GCLP_HBRBACKGROUND'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTBOTTOM" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTBOTTOM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTBOTTOM' in member name 'Constants.HTBOTTOM' by changing it to 'Htbottom'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTBOTTOMLEFT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTBOTTOMLEFT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTBOTTOMLEFT' in member name 'Constants.HTBOTTOMLEFT' by changing it to 'Htbottomleft'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTBOTTOMRIGHT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTBOTTOMRIGHT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTBOTTOMRIGHT' in member name 'Constants.HTBOTTOMRIGHT' by changing it to 'Htbottomright'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTLEFT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTLEFT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTLEFT' in member name 'Constants.HTLEFT' by changing it to 'Htleft'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTRIGHT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTRIGHT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTRIGHT' in member name 'Constants.HTRIGHT' by changing it to 'Htright'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTTOP" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTTOP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTTOP' in member name 'Constants.HTTOP' by changing it to 'Httop'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTTOPLEFT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTTOPLEFT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTTOPLEFT' in member name 'Constants.HTTOPLEFT' by changing it to 'Httopleft'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HTTOPRIGHT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTTOPRIGHT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTTOPRIGHT' in member name 'Constants.HTTOPRIGHT' by changing it to 'Httopright'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MF_BYCOMMAND" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BYCOMMAND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'BYCOMMAND' in member name 'Constants.MF_BYCOMMAND' by changing it to 'Bycommand'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.MF_BYCOMMAND'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MF_ENABLED" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ENABLED" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ENABLED' in member name 'Constants.MF_ENABLED' by changing it to 'Enabled'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.MF_ENABLED'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MF_GRAYED" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GRAYED" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'GRAYED' in member name 'Constants.MF_GRAYED' by changing it to 'Grayed'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.MF_GRAYED'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MONITOR_DEFAULTTONEAREST" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DEFAULTTONEAREST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DEFAULTTONEAREST' in member name 'Constants.MONITOR_DEFAULTTONEAREST' by changing it to 'Defaulttonearest'.</Issue>
            </Message>
            <Message Id="MONITOR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MONITOR' in member name 'Constants.MONITOR_DEFAULTTONEAREST' by changing it to 'Monitor'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.MONITOR_DEFAULTTONEAREST'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SC_MAXIMIZE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MAXIMIZE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MAXIMIZE' in member name 'Constants.SC_MAXIMIZE' by changing it to 'Maximize'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.SC_MAXIMIZE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SC_MINIMIZE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MINIMIZE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MINIMIZE' in member name 'Constants.SC_MINIMIZE' by changing it to 'Minimize'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.SC_MINIMIZE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SC_MOVE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MOVE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MOVE' in member name 'Constants.SC_MOVE' by changing it to 'Move'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.SC_MOVE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SC_RESTORE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="RESTORE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'RESTORE' in member name 'Constants.SC_RESTORE' by changing it to 'Restore'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.SC_RESTORE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SC_SIZE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SIZE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SIZE' in member name 'Constants.SC_SIZE' by changing it to 'Size'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.SC_SIZE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SW_SHOWMINIMIZED" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHOWMINIMIZED" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SHOWMINIMIZED' in member name 'Constants.SW_SHOWMINIMIZED' by changing it to 'Showminimized'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.SW_SHOWMINIMIZED'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SW_SHOWNORMAL" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHOWNORMAL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SHOWNORMAL' in member name 'Constants.SW_SHOWNORMAL' by changing it to 'Shownormal'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.SW_SHOWNORMAL'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SYSCOMMAND" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SYSCOMMAND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SYSCOMMAND' in member name 'Constants.SYSCOMMAND' by changing it to 'Syscommand'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TPM_LEFTBUTTON" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LEFTBUTTON" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'LEFTBUTTON' in member name 'Constants.TPM_LEFTBUTTON' by changing it to 'Leftbutton'.</Issue>
            </Message>
            <Message Id="TPM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TPM' in member name 'Constants.TPM_LEFTBUTTON' by changing it to 'Tpm'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.TPM_LEFTBUTTON'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TPM_RETURNCMD" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="RETURNCMD" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'RETURNCMD' in member name 'Constants.TPM_RETURNCMD' by changing it to 'Returncmd'.</Issue>
            </Message>
            <Message Id="TPM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TPM' in member name 'Constants.TPM_RETURNCMD' by changing it to 'Tpm'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.TPM_RETURNCMD'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_CREATE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CREATE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CREATE' in member name 'Constants.WM_CREATE' by changing it to 'Create'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WM_CREATE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_GETMINMAXINFO" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GETMINMAXINFO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'GETMINMAXINFO' in member name 'Constants.WM_GETMINMAXINFO' by changing it to 'Getminmaxinfo'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WM_GETMINMAXINFO'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_INITMENU" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="INITMENU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'INITMENU' in member name 'Constants.WM_INITMENU' by changing it to 'Initmenu'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WM_INITMENU'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_NCACTIVATE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NCACTIVATE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'NCACTIVATE' in member name 'Constants.WM_NCACTIVATE' by changing it to 'Ncactivate'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WM_NCACTIVATE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_NCCALCSIZE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NCCALCSIZE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'NCCALCSIZE' in member name 'Constants.WM_NCCALCSIZE' by changing it to 'Nccalcsize'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WM_NCCALCSIZE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_NCHITTEST" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NCHITTEST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'NCHITTEST' in member name 'Constants.WM_NCHITTEST' by changing it to 'Nchittest'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WM_NCHITTEST'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WM_NCPAINT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NCPAINT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'NCPAINT' in member name 'Constants.WM_NCPAINT' by changing it to 'Ncpaint'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WM_NCPAINT'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WS_MAXIMIZE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MAXIMIZE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MAXIMIZE' in member name 'Constants.WS_MAXIMIZE' by changing it to 'Maximize'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Constants.WS_MAXIMIZE'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MARGINS" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MARGINS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'MARGINS' in type name 'MARGINS' by changing it to 'Margins'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'MARGINS' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'MARGINS' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#bottomHeight" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MARGINS.bottomHeight' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#leftWidth" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MARGINS.leftWidth' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#rightWidth" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MARGINS.rightWidth' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#topHeight" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MARGINS.topHeight' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MINMAXINFO" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MINMAXINFO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'MINMAXINFO' in type name 'MINMAXINFO' by changing it to 'Minmaxinfo'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'MINMAXINFO' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'MINMAXINFO' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ptMaxPosition" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MINMAXINFO.ptMaxPosition' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ptMaxSize" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MINMAXINFO.ptMaxSize' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ptMaxTrackSize" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MINMAXINFO.ptMaxTrackSize' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ptMinTrackSize" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MINMAXINFO.ptMinTrackSize' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ptReserved" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MINMAXINFO.ptReserved' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MONITORINFO" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MONITORINFO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'MONITORINFO' in type name 'MONITORINFO' by changing it to 'Monitorinfo'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#cbSize" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MONITORINFO.cbSize' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dwFlags" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MONITORINFO.dwFlags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'MONITORINFO.dwFlags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#rcMonitor" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MONITORINFO.rcMonitor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#rcWork" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MONITORINFO.rcWork' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="POINT" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="POINT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'POINT' in type name 'POINT' by changing it to 'Point'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="15">In method 'POINT.POINT(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="15">In method 'POINT.POINT(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Equality(Fluent.Metro.Native.POINT,Fluent.Metro.Native.POINT)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="48">In method 'POINT.operator ==(POINT, POINT)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="48">In method 'POINT.operator ==(POINT, POINT)', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Inequality(Fluent.Metro.Native.POINT,Fluent.Metro.Native.POINT)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="53">In method 'POINT.operator !=(POINT, POINT)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="53">In method 'POINT.operator !=(POINT, POINT)', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#X" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="21">Consider providing a more meaningful name than member name 'POINT.X'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Code\Fluent.Ribbon\fluent\Fluent\Fluent\Metro\Natives" File="POINT.cs" Line="27">Consider providing a more meaningful name than member name 'POINT.Y'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RECT" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="RECT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'RECT' in type name 'RECT' by changing it to 'Rect'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#bottom" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RECT.bottom' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#left" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RECT.left' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#right" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RECT.right' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#top" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RECT.top' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnsafeNativeMethods" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#_PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'UnsafeNativeMethods._PostMessage(IntPtr, uint, IntPtr, IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods._PostMessage(IntPtr, uint, IntPtr, IntPtr)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods._PostMessage(IntPtr, uint, IntPtr, IntPtr)'&#xD;&#xA;   -&gt;'UnsafeNativeMethods.PostMessage(IntPtr, uint, IntPtr, IntPtr)'&#xD;&#xA;   -&gt;'MetroWindow.ShowSystemMenuPhysicalCoordinates(Window, Point)'&#xD;&#xA;   -&gt;'MetroWindow.TitleBarMouseUp(object, MouseButtonEventArgs)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteObject(System.IntPtr)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'UnsafeNativeMethods.DeleteObject(IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FreeLibrary(System.IntPtr)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.FreeLibrary(IntPtr)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.FreeLibrary(IntPtr)'&#xD;&#xA;   -&gt;'WindowCommands.~WindowCommands()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCursorPos(Fluent.Metro.Native.UnsafeNativeMethods+Win32Point&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'UnsafeNativeMethods.GetCursorPos(out UnsafeNativeMethods.Win32Point)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.GetCursorPos(out UnsafeNativeMethods.Win32Point)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.GetCursorPos(out UnsafeNativeMethods.Win32Point)'&#xD;&#xA;   -&gt;'MetroWindow.GetCorrectPosition(Visual)'&#xD;&#xA;   -&gt;'MetroWindow.TitleBarMouseUp(object, MouseButtonEventArgs)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDoubleClickTime()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.GetDoubleClickTime()' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.GetDoubleClickTime()'&#xD;&#xA;   -&gt;'MetroWindow.MetroWindow()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSystemMenu(System.IntPtr,System.Boolean)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'bRevert' of P/Invoke 'UnsafeNativeMethods.GetSystemMenu(IntPtr, bool)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.GetSystemMenu(IntPtr, bool)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.GetSystemMenu(IntPtr, bool)'&#xD;&#xA;   -&gt;'MetroWindow.ShowSystemMenuPhysicalCoordinates(Window, Point)'&#xD;&#xA;   -&gt;'MetroWindow.TitleBarMouseUp(object, MouseButtonEventArgs)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowPlacement(System.IntPtr,Fluent.Metro.Native.WINDOWPLACEMENT&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'UnsafeNativeMethods.GetWindowPlacement(IntPtr, out WINDOWPLACEMENT)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.GetWindowPlacement(IntPtr, out WINDOWPLACEMENT)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.GetWindowPlacement(IntPtr, out WINDOWPLACEMENT)'&#xD;&#xA;   -&gt;'WindowSettings.SaveWindowState()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsWindow(System.IntPtr)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'UnsafeNativeMethods.IsWindow(IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.IsWindow(IntPtr)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.IsWindow(IntPtr)'&#xD;&#xA;   -&gt;'MetroWindow.ShowSystemMenuPhysicalCoordinates(Window, Point)'&#xD;&#xA;   -&gt;'MetroWindow.TitleBarMouseUp(object, MouseButtonEventArgs)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadLibrary(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadLibrary(string)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadLibrary(string)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Close.get()'</Issue>
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadLibrary(string)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadLibrary(string)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Maximize.get()'</Issue>
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadLibrary(string)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadLibrary(string)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Minimize.get()'</Issue>
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadLibrary(string)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadLibrary(string)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Restore.get()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadString(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Close.get()'</Issue>
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Maximize.get()'</Issue>
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Minimize.get()'</Issue>
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.LoadString(IntPtr, uint, StringBuilder, int)'&#xD;&#xA;   -&gt;'WindowCommands.GetCaption(int)'&#xD;&#xA;   -&gt;'WindowCommands.Restore.get()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetClassLongPtr64(System.IntPtr,System.Int32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="PInvokeEntryPointsShouldExist" Category="Microsoft.Interoperability" CheckId="CA1400" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="CriticalWarning">Correct the declaration of 'UnsafeNativeMethods.SetClassLongPtr64(IntPtr, int, IntPtr)' so that it correctly points to an existing entry point in 'user32.dll'. The unmanaged entry point name currently linked to is SetClassLongPtr.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetWindowPlacement(System.IntPtr,Fluent.Metro.Native.WINDOWPLACEMENT&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'UnsafeNativeMethods.SetWindowPlacement(IntPtr, ref WINDOWPLACEMENT)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.SetWindowPlacement(IntPtr, ref WINDOWPLACEMENT)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.SetWindowPlacement(IntPtr, ref WINDOWPLACEMENT)'&#xD;&#xA;   -&gt;'WindowSettings.LoadWindowState()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TrackPopupMenuEx(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="PlatformInvokeStack" Certainty="33" Level="CriticalError">Review declarative security for 'UnsafeNativeMethods.TrackPopupMenuEx(IntPtr, uint, int, int, IntPtr, IntPtr)' and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'UnsafeNativeMethods.TrackPopupMenuEx(IntPtr, uint, int, int, IntPtr, IntPtr)'&#xD;&#xA;   -&gt;'MetroWindow.ShowSystemMenuPhysicalCoordinates(Window, Point)'&#xD;&#xA;   -&gt;'MetroWindow.TitleBarMouseUp(object, MouseButtonEventArgs)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WINDOWPLACEMENT" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WINDOWPLACEMENT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'WINDOWPLACEMENT' in type name 'WINDOWPLACEMENT' by changing it to 'Windowplacement'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'WINDOWPLACEMENT' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'WINDOWPLACEMENT' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#flags" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WINDOWPLACEMENT.flags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'flags' in member name 'WINDOWPLACEMENT.flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#length" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WINDOWPLACEMENT.length' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#maxPosition" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WINDOWPLACEMENT.maxPosition' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#minPosition" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WINDOWPLACEMENT.minPosition' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#normalPosition" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WINDOWPLACEMENT.normalPosition' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="MarkAllNonSerializableFields" Category="Microsoft.Usage" CheckId="CA2235" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Field 'WINDOWPLACEMENT.normalPosition' is a member of type 'WINDOWPLACEMENT', which is serializable, but is of type 'RECT', which is not serializable. Add the NonSerializedAttribute to 'WINDOWPLACEMENT.normalPosition'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#showCmd" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-12-01 18:48:50Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'WINDOWPLACEMENT.showCmd' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="ArrayFieldsShouldNotBeReadOnly" Category="Microsoft.Security" CheckId="CA2105">
   <Name>Array fields should not be read only</Name>
   <Description>Read-only fields that reference arrays might not give the intended effect. Setting a field which references an array to read-only prevents the value of the field from being changed. Note that elements in the array can be changed. You can ignore this violation if protecting the contents of the array is not a concern.</Description>
   <Resolution Name="Default">Either replace {0} with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182299(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="securityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="HResultOrErrorCode">{0} calls {1} but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Resolution>
   <Resolution Name="ObjectCreation">{0} creates a new instance of {1} which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Resolution>
   <Resolution Name="StringCreation">{0} calls {1} but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="MemberMoreMeaningfulName">Consider providing a more meaningful name than member name {0}.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAllNonSerializableFields" Category="Microsoft.Usage" CheckId="CA2235">
   <Name>Mark all non-serializable fields</Name>
   <Description>All fields that cannot be serialized directly should have the NonSerializedAttribute. Types that have the SerializableAttribute should not have fields of types that do not have the SerializableAttribute unless the fields are marked with the NonSerializedAttribute.</Description>
   <Resolution Name="Default">Field {0} is a member of type {1}, which is serializable, but is of type {2}, which is not serializable. Add the NonSerializedAttribute to {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182349(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414">
   <Name>Mark boolean P/Invoke arguments with MarshalAs</Name>
   <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
   <Resolution Name="Default">Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Resolution Name="Return">Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182206(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokeEntryPointsShouldExist" Category="Microsoft.Interoperability" CheckId="CA1400">
   <Name>P/Invoke entry points should exist</Name>
   <Description>Methods decorated with the DllImport attribute should point to existing unmanaged entry points. There is no compile-time check to ensure that methods decorated with the DllImport attribute actually exist in the referenced unmanaged dll. In the event that an entry point does not exist or the specified argument list is not correct, a runtime exception will be generated.</Description>
   <Resolution Name="Default">Correct the declaration of {0} so that it correctly points to an existing entry point in {1}. The unmanaged entry point name currently linked to is {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182208(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalWarning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewSuppressUnmanagedCodeSecurityUsage" Category="Microsoft.Security" CheckId="CA2118">
   <Name>Review SuppressUnmanagedCodeSecurityAttribute usage</Name>
   <Description>Calling a method with the SuppressUnmanagedCodeSecurityAttribute applied to it can create a security weakness. Unmanaged code security checks ensure that all callers in the call stack have permission to execute unmanaged code. Disabling code security for P/Invoke methods allows callers that do not have this permission to breach security. This is acceptable only if the code is completely harmless, or callers have no way to pass arbitrary arguments through to the unmanaged code.</Description>
   <Resolution Name="PlatformInvokeStack">Review declarative security for {0} and its callers for potential vulnerabilities. The following call stack might expose a way to circumvent security protection: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182311(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnNativeResourcesShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1049">
   <Name>Types that own native resources should be disposable</Name>
   <Description>Types that allocate unmanaged resources should implement IDisposable to allow callers to release those resources on demand. Failure to implement IDisposable can result in unmanaged resources being unavailable or underutilized.</Description>
   <Resolution Name="Default">Implement IDisposable on {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182173(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030">
   <Name>Use events where appropriate</Name>
   <Description>A method name suggestive of event functionality was encountered.</Description>
   <Resolution Name="Default">Consider making {0} an event.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182177(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003">
   <Name>Use generic event handler instances</Name>
   <Description>Do not declare new delegates to be used as event handlers when targeting a version of the .NET Framework that supports generics. Use an instance EventHandler&lt;T&gt; instead.</Description>
   <Resolution Name="Default">Remove {0} and replace its usage with EventHandler&lt;T&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182178(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="Member">Replace the term '{0}' in member name {1} with the preferred alternate '{2}'.</Resolution>
   <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
